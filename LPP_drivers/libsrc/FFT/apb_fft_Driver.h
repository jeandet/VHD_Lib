/*------------------------------------------------------------------------------
--  This file is a part of the LPP VHDL IP LIBRARY
--  Copyright (C) 2009 - 2010, Laboratory of Plasmas Physic - CNRS
--
--  This program is free software; you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation; either version 3 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program; if not, write to the Free Software
--  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-------------------------------------------------------------------------------
--                      Author : Martin Morlot
--                     Mail : martin.morlot@lpp.polytechnique.fr
-----------------------------------------------------------------------------*/
#ifndef APB_FFT_DRIVER_H
#define APB_FFT_DRIVER_H

/*! \file apb_fft_Driver.h
    \brief LPP FFT driver.

    This library is written to work with LPP_APB_FFT VHDL module from LPP's FreeVHDLIB. It calculate a fast fourier transforms,
    from an input data table.

    \author Martin Morlot  martin.morlot@lpp.polytechnique.fr
*/

#define FFT_Empty 0x00100 /**< Used to know when the data can be send to the FFT module */
#define FFT_Full  0x01000 /**< Used to know when the data can be send to the FFT module */


/*===================================================
        T Y P E S     D E F
====================================================*/
/*! \struct FFT_Driver
    \brief Sturcture representing the fft registers
*/
struct FFT_Driver
{
    int RWDataReg;     /**< \brief Data register Write/Read */
    int ReadAddrReg;   /**< \brief Address register for the reading operation */
    int ConfigReg;     /**< \brief Configuration register composed of Read enable Flag [HEX 0]
                                                                      Write enable Flag [HEX 1]
                                                                      Empty Flag [HEX 2]
                                                                      Full Flag [HEX 3]
                                                                      Dummy "C" [HEX 4/5/6/7] */
    int Dummy1;       /**< \brief Unused register, aesthetic interest */
    int Dummy0;       /**< \brief Unused register, aesthetic interest */
    int WriteAddrReg; /**< \brief Address register for the writing operation */
};

typedef volatile struct FFT_Driver FFT_Device;


/*===================================================
        F U N C T I O N S
====================================================*/
/*! \fn FFT_Device* openFFT(int count);
    \brief Return count FFT.

    This Function scans APB devices table and returns count FFT.

    \param count The number of the FFT you whant to get. For example if you have 3 FFTS on your SOC you want
    to use FFT1 so count = 1.
    \return The pointer to the device.
*/
FFT_Device* openFFT(int count);

/*! \fn int FftInput(int Tbl[],FFT_Device*);
    \brief Fill in the Input for the FFT

    This function provides the data used by the FFT

    \param Tbl[] The Table which contains the Data.
    \param dev The FFT pointer.
*/
int FftInput(int Tbl[],FFT_Device* dev);

/*! \fn int FftOutput(int Tbl[],FFT_Device*);
    \brief Save data from the FFT

    This function save the data generated by the FFT

    \param Tbl[] The Table which will contains the Data.
    \param dev The FFT pointer.
*/
int FftOutput(int Tbl[],FFT_Device* dev);



#endif
